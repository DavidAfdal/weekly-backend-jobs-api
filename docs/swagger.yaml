basePath: /api
definitions:
  request.CreateJobInput:
    properties:
      category:
        type: string
      company:
        type: string
      description:
        type: string
      image:
        type: string
      location:
        type: string
      salary:
        type: integer
      status:
        type: string
      title:
        type: string
      userId:
        type: string
    required:
    - category
    - company
    - description
    - image
    - location
    - salary
    - status
    - title
    - userId
    type: object
  request.UpdateJobInput:
    properties:
      category:
        type: string
      company:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      location:
        type: string
      salary:
        type: integer
      status:
        type: string
      title:
        type: string
    required:
    - category
    - company
    - description
    - image
    - location
    - salary
    - status
    - title
    type: object
  response.WebResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
host: localhost:7426
info:
  contact:
    name: David Afdal
  description: A Jobs management service API in Go using Gin framework.
  title: Gin Go Jobs Service
  version: "1.0"
paths:
  /job:
    get:
      description: Return list of jobs.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
      summary: Get All Jobs.
      tags:
      - Jobs
    post:
      description: Save job data in Db.
      parameters:
      - description: Create job
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/request.CreateJobInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
      summary: Create job
      tags:
      - Jobs
  /job/{jobId}:
    delete:
      description: Delete job data in Db.
      parameters:
      - description: Delete Job By Job ID
        in: path
        name: jobId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
      summary: Delete job
      tags:
      - Jobs
    get:
      description: Return the job whoes jobId value matches id
      parameters:
      - description: get jobs by id
        in: path
        name: jobId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
      summary: Get Single jobs by id.
      tags:
      - Jobs
    patch:
      description: Update job data in Db.
      parameters:
      - description: Update Job By Job ID
        in: path
        name: jobId
        required: true
        type: string
      - description: Update job
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/request.UpdateJobInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
      summary: Update job
      tags:
      - Jobs
  /job/{userId}:
    get:
      description: Return the job whoes jobId value matches id
      parameters:
      - description: get shared jobs by userId
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
      summary: Get Shared jobs by userId.
      tags:
      - Jobs
swagger: "2.0"
